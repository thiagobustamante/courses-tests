document.querySelector('mutation-test-report-app').report = {"files":{"/Users/u004704/git/courses-tests/order-service-jest/lib/application/orders.js":{"language":"javascript","mutants":[{"id":"0","location":{"end":{"column":6,"line":12},"start":{"column":34,"line":4}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"4","location":{"end":{"column":64,"line":8},"start":{"column":37,"line":8}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"6","location":{"end":{"column":2,"line":25},"start":{"column":18,"line":23}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"2","location":{"end":{"column":28,"line":7},"start":{"column":13,"line":7}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"3","location":{"end":{"column":10,"line":9},"start":{"column":30,"line":7}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"5","location":{"end":{"column":6,"line":20},"start":{"column":39,"line":14}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"1","location":{"end":{"column":28,"line":7},"start":{"column":13,"line":7}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"}],"source":"const { Order } = require('../domain/orders');\n\nclass OrderUseCases {\n    async createOrder(orderData) {\n        const order = new Order();\n        order.customerId = orderData.customerId;\n        if (orderData.items) {\n            orderData.items.forEach(item => order.addItem(item));\n        }\n        await order.save();\n        return order;\n    }\n\n    async addOrderItem(orderId, item) {\n        const order = new Order(orderId);\n        await order.load();\n        order.addItem(item);\n        await order.save();\n        return order;\n    }\n}\n\nmodule.exports = {\n    OrderUseCases\n};"},"/Users/u004704/git/courses-tests/order-service-jest/lib/domain/orders.js":{"language":"javascript","mutants":[{"id":"11","location":{"end":{"column":10,"line":8},"start":{"column":18,"line":6}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"12","location":{"end":{"column":34,"line":10},"start":{"column":23,"line":10}},"mutatorName":"ArrayDeclaration","replacement":"new Array([])","status":"Survived"},{"id":"13","location":{"end":{"column":6,"line":16},"start":{"column":14,"line":14}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"14","location":{"end":{"column":6,"line":20},"start":{"column":22,"line":18}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"15","location":{"end":{"column":6,"line":24},"start":{"column":32,"line":22}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"16","location":{"end":{"column":51,"line":23},"start":{"column":28,"line":23}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"17","location":{"end":{"column":51,"line":23},"start":{"column":28,"line":23}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"18","location":{"end":{"column":51,"line":23},"start":{"column":28,"line":23}},"mutatorName":"LogicalOperator","replacement":"customerId && undefined","status":"Survived"},{"id":"19","location":{"end":{"column":6,"line":28},"start":{"column":17,"line":26}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"20","location":{"end":{"column":6,"line":41},"start":{"column":19,"line":30}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"7","location":{"end":{"column":6,"line":12},"start":{"column":21,"line":5}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"8","location":{"end":{"column":16,"line":6},"start":{"column":13,"line":6}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"21","location":{"end":{"column":35,"line":31},"start":{"column":13,"line":31}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"24","location":{"end":{"column":10,"line":39},"start":{"column":37,"line":31}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"22","location":{"end":{"column":35,"line":31},"start":{"column":13,"line":31}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"25","location":{"end":{"column":86,"line":32},"start":{"column":51,"line":32}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"9","location":{"end":{"column":16,"line":6},"start":{"column":13,"line":6}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"23","location":{"end":{"column":35,"line":31},"start":{"column":13,"line":31}},"mutatorName":"LogicalOperator","replacement":"item || item.productId","status":"Survived"},{"id":"27","location":{"end":{"column":86,"line":32},"start":{"column":56,"line":32}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"10","location":{"end":{"column":16,"line":6},"start":{"column":13,"line":6}},"mutatorName":"BooleanLiteral","replacement":"id","status":"Survived"},{"id":"30","location":{"end":{"column":29,"line":33},"start":{"column":17,"line":33}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"29","location":{"end":{"column":29,"line":33},"start":{"column":17,"line":33}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"31","location":{"end":{"column":14,"line":35},"start":{"column":31,"line":33}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"35","location":{"end":{"column":6,"line":53},"start":{"column":22,"line":43}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"32","location":{"end":{"column":14,"line":37},"start":{"column":20,"line":35}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"33","location":{"end":{"column":24,"line":38},"start":{"column":20,"line":38}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"28","location":{"end":{"column":86,"line":32},"start":{"column":56,"line":32}},"mutatorName":"EqualityOperator","replacement":"i.productId !== item.productId","status":"Survived"},{"id":"34","location":{"end":{"column":21,"line":40},"start":{"column":16,"line":40}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"37","location":{"end":{"column":35,"line":45},"start":{"column":13,"line":45}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"26","location":{"end":{"column":86,"line":32},"start":{"column":56,"line":32}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"38","location":{"end":{"column":35,"line":45},"start":{"column":13,"line":45}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"36","location":{"end":{"column":28,"line":44},"start":{"column":23,"line":44}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"39","location":{"end":{"column":35,"line":45},"start":{"column":13,"line":45}},"mutatorName":"LogicalOperator","replacement":"item || item.productId","status":"Survived"},{"id":"41","location":{"end":{"column":86,"line":46},"start":{"column":51,"line":46}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"40","location":{"end":{"column":10,"line":51},"start":{"column":37,"line":45}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"43","location":{"end":{"column":86,"line":46},"start":{"column":56,"line":46}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"42","location":{"end":{"column":86,"line":46},"start":{"column":56,"line":46}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"44","location":{"end":{"column":86,"line":46},"start":{"column":56,"line":46}},"mutatorName":"EqualityOperator","replacement":"i.productId !== item.productId","status":"Survived"},{"id":"47","location":{"end":{"column":14,"line":50},"start":{"column":31,"line":47}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"45","location":{"end":{"column":29,"line":47},"start":{"column":17,"line":47}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"49","location":{"end":{"column":6,"line":64},"start":{"column":27,"line":55}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"48","location":{"end":{"column":31,"line":49},"start":{"column":27,"line":49}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"46","location":{"end":{"column":29,"line":47},"start":{"column":17,"line":47}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"52","location":{"end":{"column":22,"line":57},"start":{"column":13,"line":57}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"54","location":{"end":{"column":83,"line":58},"start":{"column":53,"line":58}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"53","location":{"end":{"column":10,"line":62},"start":{"column":24,"line":57}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"55","location":{"end":{"column":83,"line":58},"start":{"column":58,"line":58}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"57","location":{"end":{"column":83,"line":58},"start":{"column":58,"line":58}},"mutatorName":"EqualityOperator","replacement":"i.productId !== productId","status":"Survived"},{"id":"51","location":{"end":{"column":22,"line":57},"start":{"column":13,"line":57}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"56","location":{"end":{"column":83,"line":58},"start":{"column":58,"line":58}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"59","location":{"end":{"column":31,"line":59},"start":{"column":17,"line":59}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"50","location":{"end":{"column":28,"line":56},"start":{"column":23,"line":56}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"58","location":{"end":{"column":31,"line":59},"start":{"column":17,"line":59}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"61","location":{"end":{"column":31,"line":59},"start":{"column":17,"line":59}},"mutatorName":"EqualityOperator","replacement":"itemIndex <= -1","status":"Survived"},{"id":"63","location":{"end":{"column":14,"line":61},"start":{"column":33,"line":59}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"62","location":{"end":{"column":31,"line":59},"start":{"column":29,"line":59}},"mutatorName":"UnaryOperator","replacement":"+1","status":"Survived"},{"id":"64","location":{"end":{"column":6,"line":72},"start":{"column":18,"line":66}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"60","location":{"end":{"column":31,"line":59},"start":{"column":17,"line":59}},"mutatorName":"EqualityOperator","replacement":"itemIndex >= -1","status":"Survived"},{"id":"66","location":{"end":{"column":6,"line":79},"start":{"column":18,"line":74}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"65","location":{"end":{"column":10,"line":71},"start":{"column":40,"line":67}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"67","location":{"end":{"column":44,"line":76},"start":{"column":23,"line":76}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"69","location":{"end":{"column":44,"line":76},"start":{"column":23,"line":76}},"mutatorName":"LogicalOperator","replacement":"orderData.items && []","status":"Survived"},{"id":"68","location":{"end":{"column":44,"line":76},"start":{"column":23,"line":76}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"70","location":{"end":{"column":44,"line":76},"start":{"column":42,"line":76}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived"},{"id":"71","location":{"end":{"column":2,"line":84},"start":{"column":18,"line":82}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"}],"source":"const uuid = require('uuid').v4;\nconst { OrdersRepository } = require('../infrastructure/database/orders-repository');\n\nclass Order {\n    constructor(id) {\n        if (!id) {\n            id = uuid();\n        }\n        this._id = id;\n        this._items = new Array();\n        this.repository = new OrdersRepository();\n    }\n\n    get id() {\n        return this._id;\n    }\n\n    get customerId() {\n        return this._customerId;\n    }\n\n    set customerId(customerId) {\n        this._customerId = customerId || undefined;\n    }\n\n    get items() {\n        return this._items.slice();\n    }\n\n    addItem(item) {\n        if (item && item.productId) {\n            const existentItem = this._items.find(i => i.productId === item.productId);\n            if (existentItem) {\n                existentItem.amount += item.amount;\n            } else {\n                this._items.push(item);\n            }\n            return true;\n        }\n        return false;\n    }\n\n    updateItem(item) {\n        let updated = false;\n        if (item && item.productId) {\n            const existentItem = this._items.find(i => i.productId === item.productId);\n            if (existentItem) {\n                existentItem.amount += item.amount;\n                updated = true;\n            }\n        }\n        return updated;\n    }\n\n    removeItem(productId) {\n        let removed = false;\n        if (productId) {\n            const itemIndex = this._items.findIndex(i => i.productId === productId);\n            if (itemIndex > -1) {\n                this._items.splice(itemIndex, 1);\n            }\n        }\n        return removed;\n    }\n\n    async save() {\n        return this.repository.persist({\n            id: this.id,\n            customerId: this.customerId,\n            items: this.items\n        });\n    }\n\n    async load() {\n        const orderData = await this.repository.load(this.id);\n        this._items = orderData.items || [];\n        this.customerId = orderData.customerId;\n        return this;\n    }\n}\n\nmodule.exports = {\n    Order\n};"},"/Users/u004704/git/courses-tests/order-service-jest/lib/infrastructure/database/mongo.js":{"language":"javascript","mutants":[{"id":"80","location":{"end":{"column":33,"line":5},"start":{"column":13,"line":5}},"mutatorName":"BooleanLiteral","replacement":"MongoDB.mongoClient","status":"Survived"},{"id":"83","location":{"end":{"column":92,"line":6},"start":{"column":30,"line":6}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"79","location":{"end":{"column":33,"line":5},"start":{"column":13,"line":5}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"78","location":{"end":{"column":33,"line":5},"start":{"column":13,"line":5}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"77","location":{"end":{"column":6,"line":10},"start":{"column":35,"line":4}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"81","location":{"end":{"column":10,"line":8},"start":{"column":35,"line":5}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"82","location":{"end":{"column":92,"line":6},"start":{"column":30,"line":6}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"84","location":{"end":{"column":92,"line":6},"start":{"column":30,"line":6}},"mutatorName":"LogicalOperator","replacement":"process.env.MONGO_DB_URL && 'mongodb://localhost:27017/orders'","status":"Survived"},{"id":"87","location":{"end":{"column":94,"line":7},"start":{"column":90,"line":7}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"86","location":{"end":{"column":122,"line":7},"start":{"column":71,"line":7}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"88","location":{"end":{"column":120,"line":7},"start":{"column":116,"line":7}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"85","location":{"end":{"column":92,"line":6},"start":{"column":58,"line":6}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"const { MongoClient } = require('mongodb');\n\nclass MongoDB {\n    static async getMongoClient() {\n        if (!MongoDB.mongoClient) {\n            const mongoURL = process.env.MONGO_DB_URL || 'mongodb://localhost:27017/orders';\n            MongoDB.mongoClient = await MongoClient.connect(mongoURL, { useNewUrlParser: true, useUnifiedTopology: true });\n        }\n        return MongoDB.mongoClient;\n    }\n}\n\nmodule.exports = MongoDB;"},"/Users/u004704/git/courses-tests/order-service-jest/lib/index.js":{"language":"javascript","mutants":[{"id":"74","location":{"end":{"column":44,"line":12},"start":{"column":17,"line":12}},"mutatorName":"StringLiteral","replacement":"``","status":"Killed","description":"Killed by: Index file should configure server correctly"},{"id":"73","location":{"end":{"column":4,"line":13},"start":{"column":15,"line":11}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: Index file should configure server correctly"},{"id":"72","location":{"end":{"column":53,"line":7},"start":{"column":38,"line":7}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed","description":"Killed by: Index file should configure server correctly"},{"id":"76","location":{"end":{"column":43,"line":14},"start":{"column":19,"line":14}},"mutatorName":"StringLiteral","replacement":"``","status":"Killed","description":"Killed by: Index file should report errors when server fail to start"},{"id":"75","location":{"end":{"column":4,"line":16},"start":{"column":23,"line":13}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: Index file should report errors when server fail to start"}],"source":"const express = require('express');\nconst path = require('path');\nconst server = require('./infrastructure/server/server');\n\n\nconst port = 3000;\nconst apiSpec = path.join(__dirname, 'open-api.yaml');\nconst app = express();\n\nserver.configure(app, apiSpec, port)\n  .then(() => {\n    console.log(`Listening on port ${port}`);\n  }).catch((error) => {\n    console.error(`Error starting server.`);\n    console.error(error);\n  });\n\nmodule.exports = app;"},"/Users/u004704/git/courses-tests/order-service-jest/lib/infrastructure/database/orders-repository.js":{"language":"javascript","mutants":[{"id":"89","location":{"end":{"column":6,"line":10},"start":{"column":21,"line":4}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OrdersRepository should persist an order correctly"},{"id":"90","location":{"end":{"column":35,"line":5},"start":{"column":13,"line":5}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed","description":"Killed by: OrdersRepository should cache ordersCollection"},{"id":"93","location":{"end":{"column":10,"line":8},"start":{"column":37,"line":5}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OrdersRepository should persist an order correctly"},{"id":"91","location":{"end":{"column":35,"line":5},"start":{"column":13,"line":5}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed","description":"Killed by: OrdersRepository should persist an order correctly"},{"id":"92","location":{"end":{"column":35,"line":5},"start":{"column":13,"line":5}},"mutatorName":"BooleanLiteral","replacement":"this.ordersCollection","status":"Killed","description":"Killed by: OrdersRepository should persist an order correctly"},{"id":"94","location":{"end":{"column":73,"line":7},"start":{"column":65,"line":7}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed","description":"Killed by: OrdersRepository should persist an order correctly"},{"id":"95","location":{"end":{"column":6,"line":15},"start":{"column":26,"line":12}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OrdersRepository should persist an order correctly"},{"id":"97","location":{"end":{"column":76,"line":14},"start":{"column":61,"line":14}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed","description":"Killed by: OrdersRepository should persist an order correctly"},{"id":"96","location":{"end":{"column":59,"line":14},"start":{"column":43,"line":14}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed","description":"Killed by: OrdersRepository should persist an order correctly"},{"id":"98","location":{"end":{"column":94,"line":14},"start":{"column":78,"line":14}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed","description":"Killed by: OrdersRepository should persist an order correctly"},{"id":"99","location":{"end":{"column":92,"line":14},"start":{"column":88,"line":14}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed","description":"Killed by: OrdersRepository should persist an order correctly"},{"id":"100","location":{"end":{"column":6,"line":20},"start":{"column":25,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: OrdersRepository should load an order correctly"},{"id":"102","location":{"end":{"column":2,"line":25},"start":{"column":18,"line":23}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed","description":"Killed by: OrdersRepository should persist an order correctly"},{"id":"101","location":{"end":{"column":58,"line":19},"start":{"column":41,"line":19}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed","description":"Killed by: OrdersRepository should load an order correctly"}],"source":"const MongoDB = require('./mongo');\n\nclass OrdersRepository {\n    async _orders() {\n        if (!this.ordersCollection) {\n            const mongoClient = await MongoDB.getMongoClient();\n            this.ordersCollection = mongoClient.db().collection('orders');\n        }\n        return this.ordersCollection;\n    }\n\n    async persist(order) {\n        const ordersCollection = await this._orders();\n        return ordersCollection.updateOne({ id: order.id }, { $set: order }, { upsert: true });\n    }\n\n    async load(orderId) {\n        const ordersCollection = await this._orders();\n        return ordersCollection.findOne({ 'id': orderId });\n    }\n}\n\nmodule.exports = {\n    OrdersRepository\n};"},"/Users/u004704/git/courses-tests/order-service-jest/lib/infrastructure/server/server.js":{"language":"javascript","mutants":[{"id":"103","location":{"end":{"column":2,"line":21},"start":{"column":46,"line":7}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"104","location":{"end":{"column":24,"line":8},"start":{"column":9,"line":8}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"105","location":{"end":{"column":24,"line":8},"start":{"column":9,"line":8}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"106","location":{"end":{"column":6,"line":10},"start":{"column":26,"line":8}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"107","location":{"end":{"column":14,"line":11},"start":{"column":9,"line":11}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"108","location":{"end":{"column":14,"line":11},"start":{"column":9,"line":11}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"112","location":{"end":{"column":39,"line":12},"start":{"column":20,"line":12}},"mutatorName":"LogicalOperator","replacement":"error.status && 500","status":"Survived"},{"id":"113","location":{"end":{"column":10,"line":15},"start":{"column":46,"line":12}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"114","location":{"end":{"column":48,"line":16},"start":{"column":23,"line":16}},"mutatorName":"StringLiteral","replacement":"``","status":"Survived"},{"id":"109","location":{"end":{"column":6,"line":18},"start":{"column":16,"line":11}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"110","location":{"end":{"column":39,"line":12},"start":{"column":20,"line":12}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"115","location":{"end":{"column":6,"line":20},"start":{"column":12,"line":18}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"111","location":{"end":{"column":39,"line":12},"start":{"column":20,"line":12}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"116","location":{"end":{"column":2,"line":41},"start":{"column":46,"line":23}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"117","location":{"end":{"column":25,"line":25},"start":{"column":20,"line":25}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"120","location":{"end":{"column":31,"line":30},"start":{"column":27,"line":30}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"118","location":{"end":{"column":6,"line":33},"start":{"column":58,"line":27}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"119","location":{"end":{"column":67,"line":29},"start":{"column":49,"line":29}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"121","location":{"end":{"column":32,"line":31},"start":{"column":26,"line":31}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"123","location":{"end":{"column":2,"line":45},"start":{"column":18,"line":43}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed","description":"Killed by: Index file should report errors when server fail to start"},{"id":"122","location":{"end":{"column":27,"line":32},"start":{"column":22,"line":32}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"}],"source":"const http = require('http');\nconst OpenApiValidator = require('express-openapi-validator');\nconst bodyParser = require('body-parser');\nconst logger = require('morgan');\nconst path = require('path');\n\nfunction errorHandler(error, req, res, next) {\n    if (res.headersSent) { // important to allow default error handler to close connection if headers already sent\n        return next(error);\n    }\n    if (error) {\n        res.status(error.status || 500).json({\n            message: error.message,\n            errors: error.errors,\n        });\n        console.error(`Error: ${error.message}`);\n        console.error(error);\n    } else {\n        next(error);\n    }\n}\n\nasync function configure(app, apiSpec, port) {\n    app.use(bodyParser.json());\n    app.use(logger('dev'));\n\n    const openApiValidator = OpenApiValidator.middleware({\n        apiSpec,\n        operationHandlers: path.join(__dirname, '../../interfaces'),\n        validateRequests: true,\n        validateFormats: 'full',\n        coerceTypes: false\n    });\n    app.use(openApiValidator);\n\n    app.use(errorHandler);\n\n    http.createServer(app).listen(port);\n\n    return app;\n}\n\nmodule.exports = {\n    configure: configure\n}"},"/Users/u004704/git/courses-tests/order-service-jest/lib/interfaces/orders-endpoints.js":{"language":"javascript","mutants":[{"id":"124","location":{"end":{"column":2,"line":29},"start":{"column":18,"line":4}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"125","location":{"end":{"column":6,"line":14},"start":{"column":45,"line":5}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"126","location":{"end":{"column":10,"line":11},"start":{"column":13,"line":6}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"127","location":{"end":{"column":69,"line":9},"start":{"column":32,"line":9}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"128","location":{"end":{"column":67,"line":9},"start":{"column":46,"line":9}},"mutatorName":"StringLiteral","replacement":"``","status":"Survived"},{"id":"130","location":{"end":{"column":6,"line":28},"start":{"column":49,"line":16}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"129","location":{"end":{"column":10,"line":13},"start":{"column":25,"line":11}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"132","location":{"end":{"column":10,"line":27},"start":{"column":25,"line":25}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"131","location":{"end":{"column":10,"line":25},"start":{"column":13,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"}],"source":"const { OrderUseCases } = require('../application/orders');\n\n\nmodule.exports = {\n    createOrder: async (call, res, next) => {\n        try {\n            const orderUseCases = new OrderUseCases();\n            const order = await orderUseCases.createOrder(call.body);\n            res.writeHead(201, { 'Location': `/orders/${order.id}` });\n            res.end();\n        } catch (error) {\n            next(error);\n        }\n    },\n\n    createOrderItem: async (call, res, next) => {\n        try {\n            const orderId = call.params.orderId;\n            const item = call.body;\n\n            const orderUseCases = new OrderUseCases();\n            await orderUseCases.addOrderItem(orderId, item);\n\n            res.status(200).send(item);\n        } catch (error) {\n            next(error);\n        }\n    }\n};\n"}},"schemaVersion":"1.0","thresholds":{"high":80,"low":60,"break":99}};